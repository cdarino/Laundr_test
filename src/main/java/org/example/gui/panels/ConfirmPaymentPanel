package org.example.gui.panels;

import org.example.gui.utils.creators.roundedPanel;
import org.example.gui.utils.creators.roundedBorder;
import org.example.gui.utils.creators.buttonCreator;
import org.example.gui.utils.creators.iconCreator;
import org.example.gui.utils.fonts.fontLoader;
import org.example.gui.utils.fonts.fontManager;
import com.formdev.flatlaf.FlatLaf;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public class ConfirmPaymentPanel extends JPanel {
    // Background color (never changes)
    private static final Color FIXED_BACKGROUND = new Color(245, 245, 245);
    
    // Section proportions (60% payment, 20% spacing, 20% summary)
    private static final double PAYMENT_RATIO = 0.80;
    private static final double SUMMARY_RATIO = 0.20;
    
    // Spacing constants
    private static final int SECTION_GAP = 20;
    private static final int PADDING = 20;
    
    private JPanel mainContainer;
    private roundedPanel paymentSection, summarySection;
    
    // Payment section components
    private JLabel paymentTitleLabel;
    private JLabel paymentMethodLabel, payViaLabel, addressTextLabel;
    private JRadioButton cashlessBtn, cashOnPickupBtn;
    private ButtonGroup paymentMethodGroup;
    private JComboBox<String> paymentAppCombo;
    private JLabel addressIconLabel, addressValueLabel;
    
    // Summary section components (copied from PickupPanel)
    private JLabel summaryTitleLabel;
    private JLabel selectedServiceLabel, quantitySummaryLabel, separationSummaryLabel;
    private JTextArea instructionsSummaryArea;
    private JPanel summaryPanel;
    
    // Bottom buttons
    private buttonCreator goBackBtn, confirmPaymentBtn;
    
    private boolean isInitialized = false;
    
    // Preserved data from PickupPanel
    private String servicesText;
    private String quantityText;
    private String separationText;
    private String instructionsText;
    private String userAddress;

    public ConfirmPaymentPanel(String services, String quantity, String separation, String instructions, String address) {
        this.servicesText = services;
        this.quantityText = quantity;
        this.separationText = separation;
        this.instructionsText = instructions;
        this.userAddress = address != null ? address : "No address on file";
        
        // Load fonts first
        fontLoader.loadFonts();
        
        setLayout(new BorderLayout());
        setBackground(FIXED_BACKGROUND);
        
        // Main container with padding
        mainContainer = new JPanel(new GridBagLayout());
        mainContainer.setOpaque(false);
        mainContainer.setBorder(new EmptyBorder(PADDING, 100, PADDING, PADDING));
        
        // Create sections
        paymentSection = createPaymentSection();
        summarySection = createSummarySection();
        
        // Layout sections
        layoutSections();
        
        // Create bottom buttons
        JPanel bottomPanel = createBottomButtons();
        
        add(mainContainer, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);
        
        // Mark as initialized
        isInitialized = true;
        
        // Listen for theme changes
        UIManager.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("lookAndFeel".equals(evt.getPropertyName())) {
                    SwingUtilities.invokeLater(() -> updateThemeColors());
                }
            }
        });
        
        // Initial theme color update
        updateThemeColors();
    }
    
    private void layoutSections() {
        mainContainer.removeAll();
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.BOTH;
        gbc.gridy = 0;
        
        // Payment section (60%)
        gbc.gridx = 0;
        gbc.weightx = PAYMENT_RATIO;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(0, 0, 0, SECTION_GAP);
        mainContainer.add(paymentSection, gbc);
        
        // Spacer/Gap (20%)
        gbc.gridx = 1;
        gbc.weightx = 0.20;
        gbc.insets = new Insets(0, 0, 0, 0);
        mainContainer.add(Box.createHorizontalGlue(), gbc);
        
        // Summary section on far right (20%)
        gbc.gridx = 2;
        gbc.weightx = SUMMARY_RATIO;
        gbc.insets = new Insets(0, 0, 0, 0);
        mainContainer.add(summarySection, gbc);
        
        mainContainer.revalidate();
        mainContainer.repaint();
    }
    
    private roundedPanel createPaymentSection() {
        roundedPanel section = new roundedPanel(16);
        section.setLayout(new BorderLayout(10, 10));
        section.setBackground(Color.WHITE);
        section.setBorder(BorderFactory.createCompoundBorder(
            new roundedBorder(16, new Color(200, 200, 200), 1),
            new EmptyBorder(15, 15, 15, 15)
        ));
        
        // Title
        paymentTitleLabel = new JLabel("Confirm Payment");
        paymentTitleLabel.setFont(fontManager.h2());
        paymentTitleLabel.setForeground(Color.BLACK);
        section.add(paymentTitleLabel, BorderLayout.NORTH);
        
        // Payment panel
        JPanel paymentPanel = new JPanel();
        paymentPanel.setLayout(new BoxLayout(paymentPanel, BoxLayout.Y_AXIS));
        paymentPanel.setOpaque(false);
        paymentPanel.setBorder(new EmptyBorder(10, 5, 10, 5));
        
        // Payment Method Label
        paymentMethodLabel = new JLabel("Payment Method");
        paymentMethodLabel.setFont(UIManager.getFont("Label.font"));
        paymentMethodLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        paymentPanel.add(paymentMethodLabel);
        paymentPanel.add(Box.createVerticalStrut(10));
        
        // Payment Method Radio Buttons
        JPanel methodRadioPanel = new JPanel(new GridLayout(1, 2, 20, 0));
        methodRadioPanel.setOpaque(false);
        methodRadioPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        methodRadioPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        
        paymentMethodGroup = new ButtonGroup();
        cashlessBtn = new JRadioButton("Cashless");
        cashOnPickupBtn = new JRadioButton("Cash on Pickup");
        
        cashlessBtn.setFont(UIManager.getFont("Label.font"));
        cashOnPickupBtn.setFont(UIManager.getFont("Label.font"));
        cashlessBtn.setOpaque(false);
        cashOnPickupBtn.setOpaque(false);
        
        paymentMethodGroup.add(cashlessBtn);
        paymentMethodGroup.add(cashOnPickupBtn);
        
        methodRadioPanel.add(cashlessBtn);
        methodRadioPanel.add(cashOnPickupBtn);
        
        paymentPanel.add(methodRadioPanel);
        paymentPanel.add(Box.createVerticalStrut(20));
        
        // Pay Via Label
        payViaLabel = new JLabel("Pay via");
        payViaLabel.setFont(UIManager.getFont("Label.font"));
        payViaLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        paymentPanel.add(payViaLabel);
        paymentPanel.add(Box.createVerticalStrut(8));
        
        // Payment App Dropdown
        String[] paymentApps = {
            "Select Payment App",
            "GCash",
            "Maya",
            "PayPal",
            "ShopeePay",
            "GrabPay"
        };
        
        paymentAppCombo = new JComboBox<>(paymentApps);
        paymentAppCombo.setFont(UIManager.getFont("ComboBox.font"));
        paymentAppCombo.setMaximumSize(new Dimension(Integer.MAX_VALUE, 35));
        paymentAppCombo.setAlignmentX(Component.LEFT_ALIGNMENT);
        paymentAppCombo.setEnabled(false);
        
        JPanel comboPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        comboPanel.setOpaque(false);
        comboPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        comboPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 35));
        comboPanel.add(paymentAppCombo);
        
        paymentPanel.add(comboPanel);
        paymentPanel.add(Box.createVerticalStrut(20));
        
        // Address Label
        addressTextLabel = new JLabel("Address");
        addressTextLabel.setFont(UIManager.getFont("Label.font"));
        addressTextLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        paymentPanel.add(addressTextLabel);
        paymentPanel.add(Box.createVerticalStrut(10));
        
        // Address with Icon - using same logic as PickupPanel ServiceButton
        JPanel addressPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 0));
        addressPanel.setOpaque(false);
        addressPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        addressPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE));
        
        // Load icon using iconCreator - same as PickupPanel ServiceButton
        Icon locationIcon = iconCreator.getIcon("Icons/address.svg", 20, 20);
        addressIconLabel = new JLabel(locationIcon);
        addressPanel.add(addressIconLabel);
        
        addressValueLabel = new JLabel("<html><body style='width:90%;'>" + userAddress + "</body></html>");
        addressValueLabel.setFont(UIManager.getFont("Label.font"));
        addressValueLabel.setVerticalAlignment(SwingConstants.TOP);
        addressPanel.add(addressValueLabel);
        
        paymentPanel.add(addressPanel);
        paymentPanel.add(Box.createVerticalGlue());
        
        section.add(paymentPanel, BorderLayout.CENTER);
        
        // Add listeners
        cashlessBtn.addActionListener(e -> {
            paymentAppCombo.setEnabled(true);
            paymentAppCombo.setSelectedIndex(0);
        });
        
        cashOnPickupBtn.addActionListener(e -> {
            paymentAppCombo.setEnabled(false);
            paymentAppCombo.setSelectedIndex(0);
        });
        
        return section;
    }
    
    // COPIED DIRECTLY FROM PickupPanel.java - createSummarySection()
    private roundedPanel createSummarySection() {
        roundedPanel section = new roundedPanel(16);
        section.setLayout(new BorderLayout(10, 10));
        section.setBackground(Color.WHITE);
        section.setBorder(BorderFactory.createCompoundBorder(
            new roundedBorder(16, new Color(200, 200, 200), 1),
            new EmptyBorder(15, 15, 15, 15)
        ));
        
        // Title
        summaryTitleLabel = new JLabel("Order Summary");
        summaryTitleLabel.setFont(fontManager.h2());
        summaryTitleLabel.setForeground(Color.BLACK); // Always black
        section.add(summaryTitleLabel, BorderLayout.NORTH);
        
        // Summary panel
        summaryPanel = new JPanel();
        summaryPanel.setLayout(new BoxLayout(summaryPanel, BoxLayout.Y_AXIS));
        summaryPanel.setOpaque(false);
        summaryPanel.setBorder(new EmptyBorder(5, 0, 5, 0));
        
        // Keep the services text as-is from PickupPanel (already formatted with bullets and line breaks)
        selectedServiceLabel = createSummaryLabel(servicesText);
        quantitySummaryLabel = createSummaryLabel(quantityText);
        separationSummaryLabel = createSummaryLabel(separationText);
        
        summaryPanel.add(selectedServiceLabel);
        summaryPanel.add(Box.createVerticalStrut(15));
        summaryPanel.add(quantitySummaryLabel);
        summaryPanel.add(Box.createVerticalStrut(15));
        summaryPanel.add(separationSummaryLabel);
        summaryPanel.add(Box.createVerticalStrut(15));
        
        // Instructions Summary - using JTextArea to match Details section styling
        JLabel instructionsHeaderLabel = new JLabel("Instructions:");
        instructionsHeaderLabel.setFont(UIManager.getFont("Label.font"));
        instructionsHeaderLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        summaryPanel.add(instructionsHeaderLabel);
        summaryPanel.add(Box.createVerticalStrut(5));
        
        instructionsSummaryArea = new JTextArea();
        instructionsSummaryArea.setText(extractTextFromHTML(instructionsText));
        instructionsSummaryArea.setLineWrap(true);
        instructionsSummaryArea.setWrapStyleWord(true);
        instructionsSummaryArea.setEditable(false);
        instructionsSummaryArea.setFont(UIManager.getFont("TextArea.font"));
        // Use rounded border like Details section
        instructionsSummaryArea.setBorder(BorderFactory.createCompoundBorder(
            new roundedBorder(10, new Color(200, 200, 200), 1),
            new EmptyBorder(8, 8, 8, 8)
        ));
        instructionsSummaryArea.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        JScrollPane instructionsSummaryScroll = new JScrollPane(instructionsSummaryArea);
        instructionsSummaryScroll.setBorder(null);
        instructionsSummaryScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        instructionsSummaryScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        instructionsSummaryScroll.setAlignmentX(Component.LEFT_ALIGNMENT);
        instructionsSummaryScroll.setMaximumSize(new Dimension(Integer.MAX_VALUE, 100));
        instructionsSummaryScroll.setPreferredSize(new Dimension(0, 100));
        
        summaryPanel.add(instructionsSummaryScroll);
        summaryPanel.add(Box.createVerticalGlue());
        
        // Wrap in scroll pane to handle overflow - vertical only
        JScrollPane summaryScroll = new JScrollPane(summaryPanel);
        summaryScroll.setOpaque(false);
        summaryScroll.getViewport().setOpaque(false);
        summaryScroll.setBorder(null);
        summaryScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        summaryScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        section.add(summaryScroll, BorderLayout.CENTER);
        
        return section;
    }
    
    // COPIED DIRECTLY FROM PickupPanel.java - createSummaryLabel()
    private JLabel createSummaryLabel(String text) {
        JLabel label = new JLabel(text);
        label.setFont(UIManager.getFont("Label.font"));
        label.setVerticalAlignment(SwingConstants.TOP);
        label.setAlignmentX(Component.LEFT_ALIGNMENT);
        return label;
    }
    
    private JPanel createBottomButtons() {
        JPanel bottomPanel = new JPanel(new BorderLayout());
        bottomPanel.setOpaque(false);
        bottomPanel.setBorder(new EmptyBorder(10, PADDING, PADDING, PADDING));
        
        // Left panel for Go Back button
        JPanel leftButtonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        leftButtonPanel.setOpaque(false);
        
        goBackBtn = new buttonCreator("Go Back", "Button.font", () -> {
            Container parent = getParent();
            if (parent instanceof JPanel) {
                ((CardLayout) parent.getLayout()).show(parent, "PICKUP");
            }
        });
        
        leftButtonPanel.add(goBackBtn);
        
        // Right panel for Confirm Payment button - aligned with summary section
        JPanel rightButtonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 0, 0));
        rightButtonPanel.setOpaque(false);
        
        confirmPaymentBtn = new buttonCreator("Confirm Payment", "Button.font", () -> {
            if (validatePayment()) {
                JOptionPane.showMessageDialog(this,
                    "Payment confirmed! Your order has been placed successfully.",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
                // Navigate to orders or dashboard
                Container parent = getParent();
                if (parent instanceof JPanel) {
                    ((CardLayout) parent.getLayout()).show(parent, "ORDERS");
                }
            }
        });
        
        rightButtonPanel.add(confirmPaymentBtn);
        
        bottomPanel.add(leftButtonPanel, BorderLayout.WEST);
        bottomPanel.add(rightButtonPanel, BorderLayout.EAST);
        
        return bottomPanel;
    }
    
    private boolean validatePayment() {
        // Check if payment method is selected
        if (!cashlessBtn.isSelected() && !cashOnPickupBtn.isSelected()) {
            JOptionPane.showMessageDialog(this,
                "Please select a payment method.",
                "Validation Error",
                JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        // If cashless, check if payment app is selected
        if (cashlessBtn.isSelected()) {
            if (paymentAppCombo.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this,
                    "Please select a payment app for cashless payment.",
                    "Validation Error",
                    JOptionPane.WARNING_MESSAGE);
                return false;
            }
        }
        
        return true;
    }
    
    private String extractTextFromHTML(String html) {
        if (html == null) return "None";
        // Remove HTML tags
        String text = html.replaceAll("<[^>]*>", "");
        // Decode HTML entities
        text = text.replace("&bull;", "•");
        text = text.replace("&nbsp;", " ");
        return text.trim().isEmpty() ? "None" : text.trim();
    }
    
    // COPIED DIRECTLY FROM PickupPanel.java - updateThemeColors() for summary section
    private void updateThemeColors() {
        if (!isInitialized) return;
        
        boolean isDark = FlatLaf.isLafDark();
        
        // Title labels - ALWAYS BLACK
        if (paymentTitleLabel != null) {
            paymentTitleLabel.setFont(fontManager.h2());
            paymentTitleLabel.setForeground(Color.BLACK);
        }
        if (summaryTitleLabel != null) {
            summaryTitleLabel.setFont(fontManager.h2());
            summaryTitleLabel.setForeground(Color.BLACK);
        }
        
        // Non-title elements - always black
        Color labelColor = Color.BLACK;
        
        if (paymentMethodLabel != null) paymentMethodLabel.setForeground(labelColor);
        if (payViaLabel != null) payViaLabel.setForeground(labelColor);
        if (addressTextLabel != null) addressTextLabel.setForeground(labelColor);
        if (addressValueLabel != null) addressValueLabel.setForeground(labelColor);
        
        // Update radio buttons
        if (cashlessBtn != null) cashlessBtn.setForeground(labelColor);
        if (cashOnPickupBtn != null) cashOnPickupBtn.setForeground(labelColor);
        
        // Update summary labels - COPIED FROM PickupPanel
        if (selectedServiceLabel != null) selectedServiceLabel.setForeground(labelColor);
        if (quantitySummaryLabel != null) quantitySummaryLabel.setForeground(labelColor);
        if (separationSummaryLabel != null) separationSummaryLabel.setForeground(labelColor);
        
        // Get text field colors from UIManager for consistency
        Color textFieldBackground = UIManager.getColor("TextField.background");
        Color textFieldForeground = UIManager.getColor("TextField.foreground");
        Color borderColor = UIManager.getColor("Component.borderColor");
        if (borderColor == null) {
            borderColor = isDark ? new Color(70, 70, 70) : new Color(200, 200, 200);
        }
        
        // Update combo box
        if (paymentAppCombo != null) {
            paymentAppCombo.setForeground(textFieldForeground);
        }
        
        // Update instructions summary area - COPIED FROM PickupPanel
        if (instructionsSummaryArea != null) {
            instructionsSummaryArea.setBackground(textFieldBackground);
            instructionsSummaryArea.setForeground(textFieldForeground);
            instructionsSummaryArea.setBorder(BorderFactory.createCompoundBorder(
                new roundedBorder(10, borderColor, 1),
                new EmptyBorder(8, 8, 8, 8)
            ));
        }
        
        repaint();
    }
    
    @Override
    public void updateUI() {
        super.updateUI();
        setBackground(FIXED_BACKGROUND);
        
        if (isInitialized) {
            updateThemeColors();
        }
    }
}
